name: Release build
env:
  DOCKER_REGISTRY: "localhost:5000"
  TAG: "latest"
  DOCKER_ORG: enmasse
  KUBERNETES_NAMESPACE: "enmasse-infra"
  SYSTEMTEST_PROFILE: smoke
  EXTERNAL_REGISTRY: "quay.io"
  DOCKER_USER: "obabec+actions"

on:
  push:
    branches:
      - master
      - actions
      - release
    tags:
      - 'v*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Export version
      id: version
      run: | 
        echo "::set-env name=VERSION::$(grep "release.version" pom.properties| cut -d'=' -f2)"

    - name: Install maven
      run: sudo apt install maven

    - name: Setup NodeJS
      run: |
        sudo apt-get install curl
        curl -sL https://deb.nodesource.com/setup_13.x
        sudo -E bash -
        sudo apt-get install nodejs

    - name: Install golang
      run: |
        sudo add-apt-repository ppa:longsleep/golang-backports
        sudo apt-get update
        sudo apt-get install golang-1.12

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11.0.2

    - name: setup-docker
      uses: docker-practice/actions-setup-docker@0.0.1
    
    - name: Setup Ruby environment with ruby-build
      uses: clupprich/ruby-build-action@v1.0.0
  
    - name: Install maven
      run: sudo apt install maven

    - name: Install asciidoctor
      run: gem install asciidoctor

    - name: Make images
      run: make SKIP_TESTS=true
      
    - name: Build images
      id: build
      run: |
        make docker_build
        echo ::set-output name=tag::$TAG
      
    - name: Change docker reg
      run: |
        echo "::set-env name=DOCKER_REGISTRY::quay.io"

    - name: Tag images
      run: make docker_tag

    - name: Release binaries
      if: failure()
      run: |
        echo "Logging in to Docker Hub"
        echo $DOCKER_REGISTRY
        docker login u ${DOCKER_USER} -p ${{secrets.QUAY_PASS}} ${EXTERNAL_REGISTRY}
        echo "Pushing images to Docker Hub"
        make docker_push
        export TAG=$(grep "release.version" pom.properties| cut -d'=' -f2)
        echo $TAG
        make docker_push
    
    - name: Show me build
      run: ls templates/build/

    - name: Create Release
      if: success() && contains(github.ref, 'refs/tags/v')
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: success() && contains(github.ref, 'refs/tags/v')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: templates/build/enmasse-${{ steps.build.outputs.tag }}.tgz
        asset_name: enmasse-${{ steps.build.outputs.tag }}.tgz
        asset_content_type: application/gzip
